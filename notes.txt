Notes for this week

HTML FORMS: an Intro

    Key components of a form:
        <form>
            - parent element of all input fields
            - has 2 unique attributes
                - action
                    1. defines the location (URL) where the form should send
                        the data to when it is submitted
                - method
                    1. defines the HTTP verb that should be used to make the
                        request to the server
                    2. browsers support only two values: "get" and "post"

        <input>
            - contains a type attribute: tells the browser what kind of input it expects,
                browser enforces different rules for each type of input
            - has a name attribute: represents data as a key-value pair with the value of the
                name attribute set as the key
            - id attribute ties input element with label element by matching label element's
                "for" attribute


    Submitting the form
        Server-side validations ensure that the form is submitted correctly

FORMS WITH EXPRESS

    when creating a form, make sure that the name attribute
        of inputs match up with the holder array of the info
        a user is submitting.  the reasoning is to keep variables
        consistent with frontend and backend.

    A quick aside: Pug layout templates

        couple of ways to easily navigate between pages
            of home and form submission

            1) Could c/p top of index.pug file to the top
                of the guest-form.pug file (not ideal)

            2) block and extends

                block = chunk of Pug code that a "child
                    template can replace"
                    - create a layout file for all templates
                        to share

    Submitting the guest form
        x-www-form-urlencoded
            this format means that the data is formatted in
                a consistent way so that the server understands
                exactly what is being submitted

        Parsing the request body
            Express framework comes with a middleware function
                that does this for us

DATA VALIDATION

    Importance of server-side data validation
        the process of ensuring that the incoming data is correct

        Lack of trust in client-side validations

            example of a form collecting a user's age, make
                sure the field is not blank
                - sets a required attribute to the age <input>

            <form method="post" action="/age">
                <label for="age">Age: </label>
                <input required type="number" id="age" />
                <input type="submit" />
            </form>

            The above example is very easily worked around.

    Serever-side validations
        "So what kind of data validations should you implement
            on the server side?"

        Expected data types
            Checking for integer vs. float (user's age must
                be an integer)
            Checking that an input date string can be
                converted to a valid date.

        Valid ranges and format
            Ensuring input is valid (age can't be over 120)
            Ensuring input is the correct format
            Ensuring strong and secure passwords

        Other validations
            Creating other fields (confirming password)

        Validations: checking that all fields are filled
            add a required attribute on the server-side of
                things

        Validations: ensuring that numGuests is valid
            numGuests >= 1
            make sure it's not a string

        Improve user experience
            When there is a server-side error, the entire field
                gets wiped, and the user must fill them out all
                over again.

            To avoid this, preset each field with the values
                that they had just submitted.

EXPRESS MIDDLEWARE

    Middleware Oveview
        "An Express application is essentially a sereies of
            middleware function calls."

        Anatomy of a middleware function
            Takes 3 arguments in a specific order:
                1) req - the request object
                2) res - the response object
                3) next - "the next middleware
                            function in the application's
                            request-response cycle"

        Series of middleware functions
            Can invoke as many middleware functions as one likes

        Application-level middleware
            introduce a function, and then use the app.use(`functionName`)
                method to invoke the function on every route

    Data Validations with Middleware
        Example: updating a guest from the forms-demo practice

        Moving all validations into a middleware function allows you
            to concisely reuse validations across different routes

        Note: in production-level projects, will most likely use express-
            validator which follows the same pattern of validating data in
            middleware functions and then passing on error messages
            through the req object.

CSRF ATTACKS

    CSRF explained
        CSRF : Cross Site Request Forgery
        Prevents fraud

    Preventing CSRF
        have server render a secret token as part of the form

        Using the csurf library
            - creates a middleware function that does the following:
                1) creates a secret value, which is sent to the client
                    and stored as a cookie named _csrf

                2) On every request for a form, a CSRF token is generated
                    from that secret value; CSRF token is then sent
                    back to the client as part of the form in a hidden
                    input field.

                3) Whenever the client submits the form, server checks
                        CSRF token that's embedded in the form and
                        verifies that it is a valid CSRF token by
                        checking it against the secret _csrf value
                        that was attached to the request as a cookie

            - npm install csurf@^1.0.0 - installs csurf
            - npm install cookie-parser@^1.0.0 - parses out cookie to verify
                token

            generate a CSRF token by calling req.csrfToken();
                - csrfToken() was added to the req object by the
                    csrfProtection middleware; middleware also
                    generates a secret _csrf value and stored it in
                    the res object's headers so that the client
                    can store it as a cookie

___________________________________________________________________________________

HW for Thurs

ENVIRONMENT VARIABLES

    What are environment variables?
        \
        Wait, what's an environment?
            environment: the system that an application is deployed to and running
                in
            ex: all projects have been on the "local environment"

        There are multiple environments that the application will be deployed
            and ran within:

            Testing - used to test the app to ensure recent changes don't affect
                existing functionality and that new features meet the project's
                    requirements

            Staging - mirrors the production environment to ensure that nothing
                unexpected occurs before the app is deployed to production

            Production - servers end users; for apps that need to support a large
                number of users, this environment can contain multiple servers

        Environment variables have their values change depending on the environment
            the app is running in; allows the change of behavior of the app by the
            environment it's running in w/o having to hard code values into code

        How are environment variables commonly used?

            List:
                - database connection settings (config/database.js)
                - server HTTP ports
                - static file locations
                - API keys and secrets

            Sequelize does not allow any flexibility for testing

            Environment variables for the database connection settings separates the
                configuration from the application's code and allows the configuration
                to be updated without having to make a code change

            Location = usually found in config/database.js files or something similar

    Setting and getting environment variable values

        Setting an environment variable value

            quickest way: via command line
                PORT=8080 node app.js

            can declare and set multiple environment variables:
                PORT=8080 NODE_ENV=development node app.js

                NODE_ENV (node environment variable): special variable that's used by
                    many node programs to determine what environment the app is running
                    in

                    ex: setting to "production" enables features in Express that help
                        to improve the overall performance of your application

            can also do so within an npm "start" script:

                {
                    "scripts": {
                        "start": "PORT=8080 NODE_ENV=development node app.js"
                    }
                }

        Getting an environment variable value

            use the process.env property:

                const port = process.env.PORT;

            process object is a global NODE object to access the process.env
                property from anywhere within your Node application

            If the PORT environment variable isn't declared/set, it'll have a
                value of undefined; can use OR ( || ) to provide a default

                const port = process.env.PORT || 8080;

    Storing environment variables in a .env file

        passing environment variables from the command line is NOT IDEAL

        use the dotenv npm package to allow declaration, storage, and setting
            of all environment variables in a .env file

            npm install dotenv --save-dev

        HIGHLY RECOMMEND INSTALLING DotENV extension for VSCode

        Loading environment variables on application setup

        All code to initialize Express app within your root directory of the proj:

            npm init --yes
            npm install express@^4.0.0 pug@^2.0.0
            npm install nodemon@^2.0.0 --save-dev
            mkdir views
            touch index.js views/index.pug

        Another way to use dotenv (within your package.json file)
            {
                "scripts": {
                    "start": "node -r dotenv/config app.js"
                }
            }

        Keeping the .env file out of source control

            usually contains sensitive info

            recommend creating a .gitignore file and placing .env
                in there

                - if sharing, recommend creating a .env.example file
                    to mirror the contents

    Using a module to organnize environment variables

        Create a config.js file - has one purpose: import all of the
            environment variables and export them to make them available
            to the rest of your application.

        Running npm binaries

            npm install dotenv-cli --save-dev
            npx sequelize init
            npx dotenv sequelize db:migrate

            Note: Might run into issues with this step with the following error:
                ERROR: Please install mysql2 package manually

        Defining environment specific npm scripts

            package.json for local 
