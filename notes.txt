Notes for this week

HTML FORMS: an Intro

    Key components of a form:
        <form>
            - parent element of all input fields
            - has 2 unique attributes
                - action
                    1. defines the location (URL) where the form should send
                        the data to when it is submitted
                - method
                    1. defines the HTTP verb that should be used to make the
                        request to the server
                    2. browsers support only two values: "get" and "post"

        <input>
            - contains a type attribute: tells the browser what kind of input it expects,
                browser enforces different rules for each type of input
            - has a name attribute: represents data as a key-value pair with the value of the
                name attribute set as the key
            - id attribute ties input element with label element by matching label element's
                "for" attribute


    Submitting the form
        Server-side validations ensure that the form is submitted correctly

FORMS WITH EXPRESS

    when creating a form, make sure that the name attribute
        of inputs match up with the holder array of the info
        a user is submitting.  the reasoning is to keep variables
        consistent with frontend and backend.

    A quick aside: Pug layout templates

        couple of ways to easily navigate between pages
            of home and form submission

            1) Could c/p top of index.pug file to the top
                of the guest-form.pug file (not ideal)

            2) block and extends

                block = chunk of Pug code that a "child
                    template can replace"
                    - create a layout file for all templates
                        to share

    Submitting the guest form
        x-www-form-urlencoded
            this format means that the data is formatted in
                a consistent way so that the server understands
                exactly what is being submitted

        Parsing the request body
            Express framework comes with a middleware function
                that does this for us

DATA VALIDATION

    Importance of server-side data validation
        the process of ensuring that the incoming data is correct

        Lack of trust in client-side validations

            example of a form collecting a user's age, make
                sure the field is not blank
                - sets a required attribute to the age <input>

            <form method="post" action="/age">
                <label for="age">Age: </label>
                <input required type="number" id="age" />
                <input type="submit" />
            </form>

            The above example is very easily worked around.

    Serever-side validations
        "So what kind of data validations should you implement
            on the server side?"

        Expected data types
            Checking for integer vs. float (user's age must
                be an integer)
            Checking that an input date string can be
                converted to a valid date.

        Valid ranges and format
            Ensuring input is valid (age can't be over 120)
            Ensuring input is the correct format
            Ensuring strong and secure passwords

        Other validations
            Creating other fields (confirming password)

        Validations: checking that all fields are filled
            add a required attribute on the server-side of
                things

        Validations: ensuring that numGuests is valid
            numGuests >= 1
            make sure it's not a string

        Improve user experience
            When there is a server-side error, the entire field
                gets wiped, and the user must fill them out all
                over again.

            To avoid this, preset each field with the values
                that they had just submitted.

EXPRESS MIDDLEWARE

    Middleware Oveview
        "An Express application is essentially a sereies of
            middleware function calls."

        Anatomy of a middleware function
            Takes 3 arguments in a specific order:
                1) req - the request object
                2) res - the response object
                3) next - "the next middleware
                            function in the application's
                            request-response cycle"

        Series of middleware functions
            Can invoke as many middleware functions as one likes

        Application-level middleware
            introduce a function, and then use the app.use(`functionName`)
                method to invoke the function on every route

    Data Validations with Middleware
        Example: updating a guest from the forms-demo practice

        Moving all validations into a middleware function allows you
            to concisely reuse validations across different routes

        Note: in production-level porjects, will most likely use express-
            validator which follows the same pattern of validating data in
            middleware functions and then passing on error messages
            through the req object.

CSRF ATTACKS

    CSRF explained
        CSRF : Cross Site Request Forgery 
